// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Trip {
  id          String   @id @default(cuid())
  city        String
  start_date  DateTime
  end_date    DateTime
  budget_band String
  pace        String
  food_prefs  String[]
  owner_id    String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  days        TripDay[]

  @@map("trip")
}

model TripDay {
  id         String     @id @default(cuid())
  trip_id    String
  day_index  Int
  theme      String
  trip       Trip       @relation(fields: [trip_id], references: [id], onDelete: Cascade)
  stops      TripStop[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@unique([trip_id, day_index])
  @@map("trip_day")
}

model TripStop {
  id            String   @id @default(cuid())
  day_id        String
  stop_index    Int
  title         String
  address       String?
  start_time    String?
  duration_mins Int?
  est_cost      Float    @default(0)
  url           String?
  day           TripDay  @relation(fields: [day_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@unique([day_id, stop_index])
  @@map("trip_stop")
}
